var search_data = {"index":{"info":[["File","lib/file/tail.rb","classes/File.html"," < Object","",1],["Tail","File","classes/File/Tail.html"," < ","This module can be included in your own File subclasses or used to extend files you want to tail. ",1],["BreakException","File::Tail","classes/File/Tail/BreakException.html"," < TailException","The BreakException is raised if the <code>break_if_eof</code> attribute is set to a true value and the",1],["DeletedException","File::Tail","classes/File/Tail/DeletedException.html"," < TailException","The DeletedException is raised if a file is deleted while tailing it. ",1],["Group","File::Tail","classes/File/Tail/Group.html"," < Object","This class can be used to coordinate tailing of many files, which have been added to the group. ",1],["LineExtension","File::Tail","classes/File/Tail/LineExtension.html"," < ","This module is used to extend all lines received via one of the tailers of a File::Tail::Group. ",1],["Logfile","File::Tail","classes/File/Tail/Logfile.html"," < File","This is an easy to use Logfile class that includes the File::Tail module. === Usage The unix command",1],["ReopenException","File::Tail","classes/File/Tail/ReopenException.html"," < TailException","The ReopenException is raised internally if File::Tail gets suspicious something unusual has happend",1],["ReturnException","File::Tail","classes/File/Tail/ReturnException.html"," < TailException","The ReturnException is raised and caught internally to implement \"tail -10\" behaviour. ",1],["TailException","File::Tail","classes/File/Tail/TailException.html"," < Exception","This is the base class of all exceptions that are raised in File::Tail. ",1],["Tailer","File::Tail","classes/File/Tail/Tailer.html"," < ::Thread","This class supervises activity on a tailed fail and collects newly read lines until the Tail::Group fetches",1],["<<","File::Tail::Group","classes/File/Tail/Group.html#M000018","(file_or_filename)","Alias for #add",2],["[]","File::Tail::Group","classes/File/Tail/Group.html#M000016","(*files)","Creates a group for +files+ (IO instances or filename strings). ",2],["add","File::Tail::Group","classes/File/Tail/Group.html#M000017","(file_or_filename)","Add a file (IO instance) or filename (responding to to_str) to this group. ",2],["add_file","File::Tail::Group","classes/File/Tail/Group.html#M000019","(file)","Add the IO instance +file+ to this group. ",2],["add_filename","File::Tail::Group","classes/File/Tail/Group.html#M000020","(filename, n = 0)","Add a file created by opening +filename+ to this group after stepping +n+ lines backwards from the end",2],["after_reopen","File::Tail","classes/File/Tail.html#M000001","(&block)","The callback is called with _self_ as an argument after a reopen has occured. This allows a tailing script",2],["backward","File::Tail","classes/File/Tail.html#M000003","(n = 0, bufsize = nil)","Rewind the last <code>n</code> lines of this file, starting from the end. The default is to start tailing",2],["each_file","File::Tail::Group","classes/File/Tail/Group.html#M000021","(&block)","Iterate over all files contained in this group yielding to +block+ for each of them. ",2],["each_tailer","File::Tail::Group","classes/File/Tail/Group.html#M000022","(&block)","Iterate over all tailers in this group yielding to +block+ for each of them. ",2],["file","File::Tail::LineExtension","classes/File/Tail/LineExtension.html#M000007","()","The file as a File instance this line was read from. ",2],["forward","File::Tail","classes/File/Tail.html#M000002","(n = 0)","Skip the first <code>n</code> lines of this file. The default is to don't skip any lines at all and start",2],["method_missing","File::Tail::Tailer","classes/File/Tail/Tailer.html#M000014","(id, *args, &block)","",2],["new","File::Tail::Group","classes/File/Tail/Group.html#M000015","(opts = {})","Creates a new File::Tail::Group instance. The following options can be given as arguments: :files:: an",2],["new","File::Tail::ReopenException","classes/File/Tail/ReopenException.html#M000000","(mode = :bottom)","Creates an ReopenException object. The mode defaults to <code>:bottom</code> which indicates that the",2],["open","File::Tail::Logfile","classes/File/Tail/Logfile.html#M000024","(filename, opts = {})","This method creates an File::Tail::Logfile object and yields to it, and closes it, if a block is given,",2],["pending_lines","File::Tail::Tailer","classes/File/Tail/Tailer.html#M000013","()","Fetch all the pending lines from this Tailer and thereby remove them from the Tailer's queue. ",2],["pending_lines?","File::Tail::Tailer","classes/File/Tail/Tailer.html#M000012","()","True if there are any lines pending on this Tailer, false otherwise. ",2],["stop","File::Tail::Group","classes/File/Tail/Group.html#M000023","()","Stop all tailers in this group at once. ",2],["tail","File::Tail","classes/File/Tail.html#M000004","(n = nil)","This method tails this file and yields to the given block for every new line that is read. If no block",2],["tail","File::Tail::Group","classes/File/Tail/Group.html#M000025","()","Tail all the lines of all the files in the Tail::Group instance, that is yield to each of them. Every",2],["tail","File::Tail::Logfile","classes/File/Tail/Logfile.html#M000028","(filename, opts = {}, &block)","Like open, but yields to every new line encountered in the logfile in +block+. ",2],["README.rdoc","files/README_rdoc.html","files/README_rdoc.html","","= File::Tail for Ruby  == Description  This is a small ruby library that allows it to \"tail\" files in",3],["file-tail.rb","files/lib/file-tail_rb.html","files/lib/file-tail_rb.html","","",3],["tail.rb","files/lib/file/tail_rb.html","files/lib/file/tail_rb.html","","",3],["group.rb","files/lib/file/tail/group_rb.html","files/lib/file/tail/group_rb.html","","",3],["line_extension.rb","files/lib/file/tail/line_extension_rb.html","files/lib/file/tail/line_extension_rb.html","","",3],["logfile.rb","files/lib/file/tail/logfile_rb.html","files/lib/file/tail/logfile_rb.html","","",3],["tailer.rb","files/lib/file/tail/tailer_rb.html","files/lib/file/tail/tailer_rb.html","","",3],["version.rb","files/lib/file/tail/version_rb.html","files/lib/file/tail/version_rb.html","","",3]],"searchIndex":["file","tail","breakexception","deletedexception","group","lineextension","logfile","reopenexception","returnexception","tailexception","tailer","<<()","[]()","add()","add_file()","add_filename()","after_reopen()","backward()","each_file()","each_tailer()","file()","forward()","method_missing()","new()","new()","open()","pending_lines()","pending_lines?()","stop()","tail()","tail()","tail()","readme.rdoc","file-tail.rb","tail.rb","group.rb","line_extension.rb","logfile.rb","tailer.rb","version.rb"],"longSearchIndex":["lib/file/tail/logfile.rb","file","file::tail","file::tail","file::tail","file::tail","file::tail","file::tail","file::tail","file::tail","file::tail","file::tail::group","file::tail::group","file::tail::group","file::tail::group","file::tail::group","file::tail","file::tail","file::tail::group","file::tail::group","file::tail::lineextension","file::tail","file::tail::tailer","file::tail::group","file::tail::reopenexception","file::tail::logfile","file::tail::tailer","file::tail::tailer","file::tail::group","file::tail","file::tail::group","file::tail::logfile","files/readme_rdoc.html","files/lib/file-tail_rb.html","files/lib/file/tail_rb.html","files/lib/file/tail/group_rb.html","files/lib/file/tail/line_extension_rb.html","files/lib/file/tail/logfile_rb.html","files/lib/file/tail/tailer_rb.html","files/lib/file/tail/version_rb.html"]}}